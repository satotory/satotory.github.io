<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-06-18T08:17:05+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Теория</title><subtitle>Данный учебник является частью учебно-метолического комплекта для всех специальностей укрупненной группы «Информатика и вычислительная техника».
</subtitle><author><name>Ruslan Kornev</name><email>ruskosha@gmail.com</email></author><entry><title type="html">Практическая работа №2</title><link href="http://localhost:4000/praktika/2021/06/18/pr2.html" rel="alternate" type="text/html" title="Практическая работа №2" /><published>2021-06-18T04:46:00+03:00</published><updated>2021-06-18T04:46:00+03:00</updated><id>http://localhost:4000/praktika/2021/06/18/pr2</id><content type="html" xml:base="http://localhost:4000/praktika/2021/06/18/pr2.html">&lt;p&gt;&lt;strong&gt;Цели&lt;/strong&gt;: Получить первые навыки работы в операционной системе Linux.&lt;/p&gt;

&lt;h3&gt;Теоретический материал.&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Перечень команд:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Chvt - Выводит на дисплей указанный виртуальный терминал&lt;/p&gt;

&lt;p&gt;login [имя пользователя] - Запрашивает у пользователя имя и пароль для входа в систему и запускает новый сеанс работы на текущем терминале. Заодно команда проверяет наличие новой почты для заданного пользователя, запускает интерпретатор, указанный в файле /etc/passwd для этого пользователя (по умолчанию запускается bash), и выполняет настроечные сценарии интерпретатора для данного пользователя.&lt;/p&gt;

&lt;p&gt;Logout - Выход из текущего сеанса и вывод приглашения на вход.&lt;/p&gt;

&lt;p&gt;shutdown [параметры] время [сообщение] - Останавливает систему, предотвращая повреждение файловой системы. В большинстве систем для использования этой команды необходимо иметь статус привилегированного пользователя. Параметры команды позволяют указать необходимость выключения или перезапуска компьютера. Существует возможность указать задержку перед остановкой, набрав знак плюс и число минут до остановки&lt;/p&gt;

&lt;p&gt;(например, +5). Можно также набрать слово now, эквивалентное +0. Кроме того можно указать сообщение, которое появится на терминалах всех пользователей, работающих в системе.&lt;/p&gt;

&lt;h3&gt;Параметры&lt;/h3&gt;

&lt;p&gt;Параметр Действие&lt;/p&gt;

&lt;p&gt;-r Быстрая перезагрузка без проверки цельности файловой системы.&lt;/p&gt;

&lt;p&gt;-h Остановить систему после завершения работы. На большинстве современных компьютеров это приводит к выключению питания.&lt;/p&gt;

&lt;p&gt;-k Отправить предупредительное сообщение, но не завершать работу.&lt;/p&gt;

&lt;p&gt;-r Перезапуск системы.&lt;/p&gt;

&lt;p&gt;Вся информация о пользователях хранится в файле /etc/passwd. Это обычный текстовый файл, право на чтение которого имеют все пользователи системы, а право на запись имеет только администратор (суперпользователь). В этом файле хранятся пароли пользователей, правда в зашифрованном виде. Подобная открытость - недостаток с точки зрения безопасности, поэтому зашифрованные пароли хранятся в отдельном закрытом для чтения и записи файле /etc/shadow.&lt;/p&gt;

&lt;p&gt;Аналогично, информация о группах хранится в файле /etc/group и содержит списки пользователей, принадлежащих той или иной группе.&lt;/p&gt;

&lt;p&gt;Каждая строка файла /etc/passwd является записью конкретного пользователя и имеет следующий формат: name:passwd-encod:UID:GID:comments:home-dir:shell&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;всего 7 полей (атрибутов), разделенных двоеточиями.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Name -Регистрационное имя пользователя. Это имя пользователь вводит в ответ на приглашение системы login.&lt;/p&gt;

&lt;p&gt;passwd-encod - Пароль пользователя в закодированном виде. Алгоритмы кодирования известны, но они не позволяют декодировать пароль. При входе в систему пароль, который вы набираете, кодируется, и результат сравнивается с полем passwd-encod. В случае совпадения пользователю разрешается войти в систему. Даже в закодированном виде доступность пароля представляет некоторую угрозу для безопасности системы. Поэтому пароль хранят в отдельном файле, а в поле passwd-encod ставится символ ‘x’.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UID&lt;/strong&gt; - Идентификатор пользователя является внутренним представлением пользователя в системе. Этот идентификатор наследуется задачами, который запускает пользователь, и файлами, которые он создает. По этому идентификатору система проверяет пользовательские права (например, при чтении файли или запуске программы). Суперпользователь имеет UID = 0, что дает ему неограниченные права в системе.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GID&lt;/strong&gt; - Определяет идентификатор первичной группы пользователя. Этот идентификатор соответствует идентификатору в файле /etc/group, который содержит имя группы и полный список пользователей, являющихся ее членами. Принадлежность пользователя к группе определяет дополнительные права в системе. Группа определяет общие для всех членов права доступа и тем самым обеспечивает возможность совместной работы (например, совместного исользования файлов).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comments&lt;/strong&gt;-Обычно, это полное “реальное” имя пользователя. Это поле может содержать дополнительную информацию, например, телефон или адрес электронной почты. Некоторые программы (например, finger и почтовые системы) используют это поле.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;home-dir&lt;/strong&gt; - Домашний каталог пользователя. При входе в систему пользователь оказывается в этом каталоге.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;shell&lt;/strong&gt; Имя программы, которую Linux использует в качестве командного интерпретатора. При входе пользователя в систему Linux автоматически запустит указанную программу.&lt;/p&gt;

&lt;p&gt;Переназначение пароля пользователя&lt;/p&gt;

&lt;p&gt;Команда passwd.&lt;/p&gt;

&lt;p&gt;Изменение учетных записей пользователей&lt;/p&gt;

&lt;p&gt;Команда usermod аналогична команде useradd и даже имеет с ней общие&lt;/p&gt;

&lt;p&gt;параметры. Однако вместо того, чтобы добавлять новые учетные записи эта&lt;/p&gt;

&lt;p&gt;команда позволяет изменять уже существующие. Вызвав команду usermod, следует&lt;/p&gt;

&lt;p&gt;сообщить регистрационное имя пользователя, а также те детали учетной записи,&lt;/p&gt;

&lt;p&gt;которые должны быть изменены:&lt;/p&gt;

&lt;p&gt;-с -Новый комментарий. Для этого также можно использовать команду chfn. (Несколько подряд идущих слов должны быть взяты в кавычки)&lt;/p&gt;

&lt;p&gt;-d - Переместить домашний каталог в новое место. Если при этом используется параметр -m, то будет скопировано также и содержимое домашнего каталога.&lt;/p&gt;

&lt;p&gt;-e - Аналогично useradd.&lt;/p&gt;

&lt;p&gt;-f - Аналогично useradd.&lt;/p&gt;

&lt;p&gt;-g - Аналогично useradd.&lt;/p&gt;

&lt;p&gt;-G - Аналогично useradd.&lt;/p&gt;

&lt;p&gt;-l рег.&lt;em&gt;имя&lt;/em&gt; Новое регистрационное имя пользователя. Имя домашнего каталога_польз-ля при этом не будет изменено. Для этого необходимо применить параметры -d и -m.&lt;/p&gt;

&lt;p&gt;-m - Используется только вместе с параметром -d. В результате применения этих двух параметров содержимое домашнего каталога копируется в новый каталог.&lt;/p&gt;

&lt;p&gt;-o - Используется вместе с параметром -u. Игнорировать необходимость уникальности идентификационного номера пользователя.&lt;/p&gt;

&lt;p&gt;-s - Аналогично useradd. Можно использовать команду chsh,&lt;/p&gt;

&lt;p&gt;-u - Новый идентификационный номер пользователя для данной учетной записи. Если параметр -o не используется, новый идентификационный номер пользователя должен быть уникален.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Удаление учетных записей пользователя&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Команде userdel нужен всего лишь один параметр - регистрационное имя&lt;/p&gt;

&lt;p&gt;пользователя, учетная запись которого подлежит удалению. Если применить&lt;/p&gt;

&lt;p&gt;дополнительный параметр -r, то команда userdel удалит также и домашний каталог&lt;/p&gt;

&lt;p&gt;пользователя со всеми хранящимися в нем файлами.&lt;/p&gt;

&lt;h3&gt;Задание.&lt;/h3&gt;

&lt;p&gt;Linux устанавливают загрузчик LILO(LInux Loader) по умолчанию.&lt;/p&gt;

&lt;p&gt;Для указания параметров загрузки и управления работой LILO используется конфигурационный файл /etc/lilo.conf, который можно редактировать. После внесения изменений в /etc/lilo.conf следует выполнить команду lilo, чтобы внесенные в файл изменения вступили в силу.&lt;/p&gt;

&lt;p&gt;Для того чтобы получить дополнительную информацию по параметрам LILO, обратитесь к справочной странице файла lilo.conf (выполнив команду man lilo.conf) или к любому из документов, хранящихся в каталоге /usr/share/lilo*/doc.&lt;/p&gt;

&lt;p&gt;После начала процесса загрузки автоматически запускается сценарий инициализации (init). Свою работу он начинает со считывания конфигурационного файла запуска по умолчанию /etc/inittab. Важнейший настроечный параметр этого файла определяет основной уровень выполнения (run level). После определения основного уровня выполнения сценарий инициализации передает управление системой утилите getty, которая создает подключения для терминалов и выводит подсказку входа в систему. Затем getty передает управление еще одной утилите, называемой login, которая считывает имя пользователя и его пароль.&lt;/p&gt;

&lt;p&gt;Возможные уровни исполнения:&lt;/p&gt;

&lt;p&gt;Уровень Описание&lt;/p&gt;

&lt;p&gt;0 Принудительное завершение всех процессов и остановка процессора.&lt;/p&gt;

&lt;p&gt;1 Однопользовательский режим. Как правило, используется для&lt;/p&gt;

&lt;p&gt;техобслуживания системы.&lt;/p&gt;

&lt;p&gt;2 Многопользовательский режим (консоль) без поддержки сетевой файловой&lt;/p&gt;

&lt;p&gt;системы.&lt;/p&gt;

&lt;p&gt;3 Многопользовательский режим с поддержкой работы сети.&lt;/p&gt;

&lt;p&gt;4 Не используется.&lt;/p&gt;

&lt;p&gt;5 Многопользовательский режим с поддержкой сети и графической системы Х.&lt;/p&gt;

&lt;p&gt;6 Принудительное завершение всех процессов и перезагрузка системы.&lt;/p&gt;

&lt;p&gt;Завершение работы системы можно рассматривать просто как изменение уровня исполнения. С этой точки зрения команды reboot, halt, poweroff и shutdown также можно отнести к командам, предназначенным для изменения уровня исполнения. Команда reboot, являющаяся символической ссылкой на команду halt, выполняет команду shutdown -r now, завершая все процессы и перезагружая систему. Команда halt также выполняет команду shutdown -h now, завершая все процессы, однако не выключая сам компьютер. Подобным образом работает и команда poweroff (также являющаяся ссылкой на halt), которая переводит систему на уровень исполнения 0 и, при наличии поддержки системой BIOS режима расширенного управления питанием (Advanced Power Management - APM), производит отключение системы.&lt;/p&gt;

&lt;p&gt;В команде shutdown после ее имени указывается время выключения системы либо в формате +m (количество минут, которое должно пройти до выключения системы после выполения команды), либо в формате hh:mm (абсолютное время суток, где hh означает час, а mm - минуту). Для немедленного выключения системы можно воспользоваться параметром now.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;длина пароля не должна быть меньше 6 символов;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;пароль должен включать по крайней мере 2 алфавитных символа и 1 цифру или специальный символ;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;пароль должен содержать хотя бы 3 символа, не встречавшихся в вашем предыдущем пароле.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Контрольные вопросы.&lt;/p&gt;

&lt;p&gt;Какая команда служит для создания пароля пользователя?&lt;/p&gt;

&lt;p&gt;Какая команда служит для создания и удаления пользователя?&lt;/p&gt;

&lt;p&gt;Какая команда служит для назначения прав пользователя?&lt;/p&gt;</content><author><name>Ruslan Kornev</name><email>ruskosha@gmail.com</email></author><category term="praktika" /><summary type="html">Цели: Получить первые навыки работы в операционной системе Linux.</summary></entry><entry><title type="html">Практическая работа №1</title><link href="http://localhost:4000/praktika/2021/06/18/pr1.html" rel="alternate" type="text/html" title="Практическая работа №1" /><published>2021-06-18T04:30:00+03:00</published><updated>2021-06-18T04:30:00+03:00</updated><id>http://localhost:4000/praktika/2021/06/18/pr1</id><content type="html" xml:base="http://localhost:4000/praktika/2021/06/18/pr1.html">&lt;p&gt;&lt;strong&gt;Цель&lt;/strong&gt;: выучить структуру рабочего стола и особенности основных объектов.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Назначение&lt;/strong&gt;: познакомиться с основными объектами рабочего стола – папками «Мой компьютер», «Сетевое окружение», «Корзина» и панелью задач, их внешним видом и содержанием, научиться узнавать и менять свойства объектов Windows.&lt;/p&gt;

&lt;h2&gt;Теоретический материал&lt;/h2&gt;

&lt;p&gt;„&lt;strong&gt;Мой компьютер&lt;/strong&gt;” – вызывает папку „Мой компьютер”, в которой находятся значки всех его локальных ресурсов: жестких, гибких и компакт-дисков, принтера и др.&lt;/p&gt;

&lt;p&gt;„&lt;strong&gt;Мои документы&lt;/strong&gt;” – вызывает папку „Мои документы”, в которой находятся документы пользователя (текстовые документы, музыка, рисунки, кинофильмы и др.)&lt;/p&gt;

&lt;p&gt;„&lt;strong&gt;Сетевое окружение&lt;/strong&gt;” – открывает окно, в котором можно найти информацию о других компьютерах, доступных в сети.&lt;/p&gt;

&lt;p&gt;„&lt;strong&gt;Корзина&lt;/strong&gt;” – сохраняет изъятые ранее файлы.&lt;/p&gt;

&lt;p&gt;„&lt;strong&gt;Панель задач&lt;/strong&gt;” – это специальная область, расположенная в нижней части экрана и выполненная в виде панели.&lt;/p&gt;

&lt;p&gt;На панели задач отображаются все открытые в данный момент папки или запущенные программы, а также дополнительные панели, области и кнопки.&lt;/p&gt;

&lt;p&gt;Для удобства работы с панелью задач кнопки на ней объединяются, когда их становится слишком много. Например, кнопки отдельных сообщений электронной почты автоматически объединяются в одну кнопку электронной почты. При нажатии этой кнопки отображается удобное меню для выбора конкретного сообщения.&lt;/p&gt;

&lt;p&gt;На панели задач в левом нижнем углу экрана располагается кнопка-меню „&lt;strong&gt;Пуск&lt;/strong&gt;”. С ее помощью можно открыть главное меню операционной системы Windows. В этом меню можно найти различные ссылки, кнопки и вложенные меню.&lt;/p&gt;

&lt;p&gt;Область уведомлений располагается на панели задач справа (системные часы, информационные значки, сообщения, быстрый запуск, текущий статус программ и др.)&lt;/p&gt;

&lt;p&gt;Языковая панель расположена рядом с областью уведомлений. С ее помощью можно узнать, какая раскладка клавиатуры в данный момент включена.&lt;/p&gt;

&lt;p&gt;В папке „&lt;strong&gt;Мой компьютер&lt;/strong&gt;” располагается несколько объектов – их количество зависит от того, на сколько дисков разбит жесткий диск, а также, сколько дополнительных устройств для считывания информации установлено в системном блоке. Щелкнув по любому значку, можно ознакомиться со всеми находящимися на нем файлами и папками. А просто выделив значок, «коснувшись» его курсором мыши, в левой части окна можно увидеть подробную информацию об этом диске.&lt;/p&gt;

&lt;h3&gt;Жесткие диски&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Жесткий диск (или винчестер) служит постоянным и стационарным накопителем информации в компьютере. На нем хранятся операционная система, различные программы и отдельные файлы. Объем памяти жесткого диска исчисляется в байтах.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;В связи с технологическими особенностями хранения информации на жестком диске при больших объемах теряется некоторая часть свободного пространства. Для уменьшения этих потерь, да и просто для удобства использования, жесткий диск принято разбивать на несколько логических дисков.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Логический диск – это часть винчестера, которую операционная система воспринимает как отдельный, самостоятельный диск.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Каждый логический диск винчестера имеет в системе свое собственное имя, состоящее из одной буквы латинского алфавита и двоеточия.&lt;/p&gt;

&lt;h3&gt;Устройства со съемными носителями&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Дисковод (Диск 3,5(А:))&lt;/strong&gt; – устройство для чтения дискет. На значке дисковода помимо него самого изображена дискета. Контекстное меню этого устройства точно такое же, как и у логических дисков, однако дискеты можно еще и отформатировать.&lt;/p&gt;

&lt;p&gt;Форматирование – это разметка накопителя информации и создание таблиц, в которых хранятся сведения о размещении данных.&lt;/p&gt;

&lt;p&gt;Устройством для чтения дисков является &lt;strong&gt;CD-дисковод&lt;/strong&gt; или &lt;strong&gt;CD/DVD-дисковод&lt;/strong&gt;. Первый может считывать информацию только с обычных CD-дисков, второй – и с обычных, и с DVD-дисков.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CD-RW&lt;/strong&gt; или &lt;strong&gt;DVD-RW&lt;/strong&gt; – устройства для чтения дисков и записи информации на диски.&lt;/p&gt;

&lt;p&gt;К пунктам контекстного меню, помимо стандартных, прибавляются пункты «Извлечь»/«Вставить» (заменяющие кнопку извлечения диска на самом приводе) и, иногда, «Автозапуск».&lt;/p&gt;

&lt;p&gt;«Автозапуск» - это пункт, присущий только дисководам компакт-дисков.&lt;/p&gt;

&lt;p&gt;„&lt;strong&gt;Корзина&lt;/strong&gt;” - это особая папка на диске, в которую попадают все удаленные файлы.&lt;/p&gt;

&lt;p&gt;Поскольку файлы, находящиеся в корзине полностью не удалены с диска, они занимают на нем тот же объем, причем он может быть большим. Поэтому нужно время от времени освобождать корзину вручную. Для этого нужно открыть папку „&lt;strong&gt;Корзина&lt;/strong&gt;” и в меню „&lt;strong&gt;Файл&lt;/strong&gt;” выбрать команду „&lt;strong&gt;Очистить корзину&lt;/strong&gt;”.&lt;/p&gt;

&lt;p&gt;С помощью „&lt;strong&gt;Корзины&lt;/strong&gt;” можно не только удалять файлы или папки целиком, но и восстанавливать их. Любые удаляемые объекты сначала помещаются в корзину и только после того, как дается команда «Очистить», все эти объекты исчезнут раз и навсегда.&lt;/p&gt;

&lt;p&gt;Используя метод перетаскивания, можно поместить любой объект системы в корзину. Для того чтобы восстановить удаленный объект, просто щелкните левой клавишей мыши по пиктограмме „&lt;strong&gt;Корзина&lt;/strong&gt;”, выберите в открывшемся диалоговом окне нужную пиктограмму и переместите ее на любой диск или рабочий стол.&lt;/p&gt;

&lt;p&gt;Любая специальная программа, предназначенная для выполнения определенного задания по обслуживанию операционной системы Windows, называется утилитой.&lt;/p&gt;

&lt;p&gt;Папка „&lt;strong&gt;Сетевое окружение&lt;/strong&gt;” дает возможность обратиться к любому компьютеру в локальной сети. При условии, что компьютер сам подключен к локальной сети, и подключен правильно.&lt;/p&gt;

&lt;p&gt;Через „&lt;strong&gt;Сетевое окружение&lt;/strong&gt;” можно заглянуть на жесткий диск любого сетевого компьютера, владелец которого предоставил доступ к своим ресурсам, открыть или переписать к себе на винчестер любой документ. Или наоборот – отправить файл на другой компьютер по сети.&lt;/p&gt;

&lt;p&gt;Чтобы определить сегодняшнюю дату нужно подвести курсор мышки к правой части панели задач, где находятся часы. Автоматически появится сегодняшняя дата.&lt;/p&gt;

&lt;p&gt;Сделав два щелчка на часах, появится окно «&lt;strong&gt;Свойства: Дата и время&lt;/strong&gt;», в котором отображается сегодняшняя дата, время на данный момент, текущий часовой пояс, где также можно посмотреть другие часовые пояса и «&lt;strong&gt;Время Интернета&lt;/strong&gt;» (здесь можно синхронизировать время с Интернет- временем).&lt;/p&gt;

&lt;h2&gt;Задания&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Представить схематический рисунок рабочего стола и описать назначение основных его элементов.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Определить какие диски есть на вашем компьютере.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Пояснить назначение папки корзина и просмотреть её содержание.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Узнать информацией каких компьютеров вы можете воспользоваться при работе на вашем компьютере.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Определить сегодняшнюю дату.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Пересчитать основные программы (приложение), которые есть на вашем компьютере.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Для знакомства со свойствами основных объектов необходимо:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Определить основные параметры вашего компьютера.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;тип процессора&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;объем оперативной памяти&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;тип монитора&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;тип клавиатуры&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;тип мыши&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Изменить оформление рабочего стола.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Установить время на компьютере, совпадающее с временем на ваших часах.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Определить общий объем диска D; и объем свободного места на нем.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Установить минимально возможный интервал времени между двумя щелчками клавиши мыши при двойном щелчке.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Контрольные вопросы:&lt;/p&gt;

&lt;div id=&quot;quiz-wrapper&quot; class=&quot;wrapper&quot;&gt;
    &lt;main class=&quot;main&quot;&gt;
        &lt;div class=&quot;quiz__head&quot;&gt;
            &lt;div class=&quot;head__content&quot; id=&quot;head&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Ut ducimus odit accusamus, illum quas magni provident odio praesentium commodi sint, porro harum, minus cupiditate architecto culpa aut ex dolore officia.&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;quiz__body&quot;&gt;
            &lt;div class=&quot;buttons&quot;&gt;
                &lt;div class=&quot;buttons__content&quot; id=&quot;buttons&quot;&gt;
                    &lt;button class=&quot;button&quot;&gt;Default button&lt;/button&gt;&lt;br /&gt;
                    &lt;button class=&quot;button button_wrong&quot;&gt;Wrong answer&lt;/button&gt;&lt;br /&gt;
                    &lt;button class=&quot;button button_correct&quot;&gt;Correct answer&lt;/button&gt;&lt;br /&gt;
                    &lt;button class=&quot;button button_passive&quot;&gt;Unclicked button&lt;/button&gt;&lt;br /&gt;
                &lt;/div&gt;
            &lt;/div&gt;
&lt;div class=&quot;footer__content&quot; id=&quot;pages&quot;&gt;0 / 0&lt;/div&gt;
            &lt;div class=&quot;quiz__footer&quot;&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/main&gt;
 &lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/assets/myscript1.js&quot;&gt;&lt;/script&gt;</content><author><name>Ruslan Kornev</name><email>ruskosha@gmail.com</email></author><category term="praktika" /><summary type="html">Цель: выучить структуру рабочего стола и особенности основных объектов.</summary></entry><entry><title type="html">Операционные системы семейства Windows и UNIX</title><link href="http://localhost:4000/glava1/2021/06/18/1-4.html" rel="alternate" type="text/html" title="Операционные системы семейства Windows и UNIX" /><published>2021-06-18T04:24:00+03:00</published><updated>2021-06-18T04:24:00+03:00</updated><id>http://localhost:4000/glava1/2021/06/18/1-4</id><content type="html" xml:base="http://localhost:4000/glava1/2021/06/18/1-4.html">&lt;p&gt;Самыми известными и популярными операционными системами общего назначения в настоящее время являются операционные
системы семействWindows и UNIX, а также их ответвления. Операционные системы семейства МХ являются одной из старейших
ветвей операционных систем, при этом до сих пор UNIX-подобные
операционные системы широко применяются и не теряют своей
актуальности.&lt;/p&gt;

&lt;p&gt;Причина того, что речь идет о семействе операционных систем
UNIX, а не об одной операционной системе, заключается в том, что
UNIX-семейство развивалось значительное время в различных, за-
частую не связанных друг с другом, коллективах разработчиков.&lt;/p&gt;

&lt;p&gt;Первый вариант ОС UNIX был создан в 1969 г. несколькими программистами лаборатории Bell Labs фирмы АТ&amp;amp;Т и работал на компьютере РОР-7. Операционная система использовалась для решения практических задач сотрудников лаборатории, и широкое ее
распространение не планировалось. Через некоторое время большая часть операционной системы была переписана с языка ассемблера на язык С, что дало возможность перенести ее на большое
количество разных платформ. В настоящее время МХ работает
на большинстве существующих архитектур и для многих из них является основной ОС.&lt;/p&gt;

&lt;p&gt;Дальнейшее развитие УМГХ-систем, разработанных в АТ&amp;amp;Т,
и их производных называется System V (пятая версия), сокращенно
SysV (иногда используется название АТ&amp;amp;Т-версия UNIX).&lt;/p&gt;

&lt;p&gt;В середине 1970-х гг. исходный код УМХ попал в университет
Беркли, где была создана своя версия ОМПХ, получившая название
BSD UNIX (Berkeley Software Distribution).&lt;/p&gt;

&lt;p&gt;В настоящее время большинство вариантов МХ основаны или
на System V, или на BSD (рис. 1.3}.&lt;/p&gt;

&lt;p&gt;Обе ветви в той или иной степени удовлетворяют различным
стандартам, в частности стандарту POSIX, и в последнее время вырабатываются единые стандарты. Наиболее современные варианты
UNIX, удовлетворяющие требованиям этих стандартов, нельзя чет-
ко отнести ни к той ни к другой ветви. В их число входят IRIX (разработка Silicon Graphics), Digital OSF (разработка DEC) и Linux,
ранние версии которой были основаны на MINIX, разработанной
Энди Таненбаумом.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
    &lt;img src=&quot;/assets/gendrevo.png&quot; alt=&quot;Рис 1.3. Генеалогическое древо различных вариантов UNIX&quot; /&gt;
    &lt;figcaption&gt;Рис 1.3. Генеалогическое древо различных вариантов UNIX&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;p&gt;Кроме того, к общему генеалогическому древу ОС семейства
ОМХ следует отнести отечественные разработки: операционные
системы МОС ЕС для ЕС ЭВМ. АЕМОС для ВС ЭВМ и СМ ЭВМ,
ИНМОС для СМ ЭВМ.&lt;/p&gt;

&lt;p&gt;Совершенно другая ситуация наблюдается, когда речь заходит
об операционных системах семейства Windows. Данные операционные системы разрабатывались и разрабатываются однойединственной компанией — Microsoft— на протяжении вот уже
более 20 лет.&lt;/p&gt;

&lt;p&gt;История операционных систем Windows начинает свой отсчет
с 1985 г., когда была разработана ОС Windows 1.0. Эта система
не являлась полноценной ОС, а была по большей части лишь графической оболочкой для операционной системы МS DOS. Она реализовывала ограниченную поддержку многозадачного режима для программ под ОС MS DOS. В это же самое время Microsoft совместно с фирмой IВМ разрабатывала полноценную многозадачную
операционную систему с графическим интерфейсом — ОS/2. Из-
начально именно операционная система ОS/2 была призвана заме-
нить устаревающую МS DOS, но в начале 1990-х гг. пути Microsoft
и IВМ разошлись и Microsoft сконцентрировалась исключительно
на развитии своей собственной операционной системы на основе
Windows.&lt;/p&gt;

&lt;p&gt;В 1990 г. на свет появилась ОС Widows 3.0, которая стала существенным шагом в развитии операционных систем семейства
Windows. В 1992 г. вышла значительно переработанная версия ветки Windows 3.х — Windows 3.1, в которой появились поддержка
шрифтов TrueType, печать в режиме WYSVIG, была повышена
стабильность работы, добавлены мультимедийные свойства и т.д.&lt;/p&gt;

&lt;p&gt;Следующим этапом в развитии ветви операционных систем
Windows является семейство Windows 9х. В это семейство входят три версии операционной системы: Windows 95, Windows 98
и Windows МЕ. Эти операционные системы привнесли обновленный пользовательский интерфейс, поддержку длинных имен файлов, поддержку 32-битных приложений, поддержку стека ТСР/IР.
Данные операционные системы вызывали достаточно большие нарекания в плане стабильности работы. Фактически ядро этих операционных систем поддерживало так называемую вытесняющую
многозадачность (свопинг), позволяющую изолировать процессы
друг от друга и в идеале исключить зависания системы из-за зависания одного-единственного процесса. Но из-за того, что реализация части ядра мало отличалась от ядра ОС Windows 3.х, зависание,
например, единственного 16-битного приложения в системе приводило к зависанию всей операционной системы.&lt;/p&gt;

&lt;p&gt;Совершенно на других принципах создавались системы на основе ветви Windows NT (Net Technology). Разработка этой ветви операционных систем семейства Windows началась в 1988 г. Это семейство оказалось наиболее удачной ветвью в развитии операционных систем Windows.&lt;/p&gt;

&lt;p&gt;Первая версия, Windows NT  3.1, появилась в 1993 г. Затем с разницей в год последовательно выходили версии Windows NT 3.5,
3.51, 4.0. Версия Windows NT 4.0 имела интерфейс в стиле Windows
935, но страдала отсутствием поддержки DirectX — библиотеки для
программирования игровых приложений.&lt;/p&gt;

&lt;p&gt;В 2000 г. вышла новая версия операционной системы на основе
ядра Windows NT — Windows 2000. Эта система включала новый
пользовательский интерфейс, поддерживала файловую систему
NTFS 3.0, а также содержала другие существенные изменения.&lt;/p&gt;

&lt;p&gt;В 2001 г. появилась операционная система Windows ХР. Эта вер-
сия была призвана заменить операционные системы Windows 2000,
а также предлагалась в качестве замены операционных систем
ветви Windows 9х, разработка которой к тому времени была прекращена. Эта операционная система получила новый графический
интерфейс, широкую поддержку всевозможных мультимедийных
функций. функции восстановления системы, улучшенную совместимость со старыми программами и играми,&lt;/p&gt;

&lt;p&gt;В 2006 г. была выпущена в свет операционная система Windows Vista. Эта система поддерживала новый пользовательский интерфейс Windows Aero на основе DirectX, появилась система User
Account Control (UAC} для контроля за действиями, выполняемыми пользователями, применялись технологии предотвращения использования эксплойтов Data Execution Prevention и Address Space Layout Randomization (ASLR) и т.д.&lt;/p&gt;

&lt;p&gt;Несмотря на все нововведения данная версия подвергалась широкой критике и не получила достаточно широкого распространения в мире. В качестве замены этой версии в 2009 г. была выпущена операционная система УЛп4 ом 7. Эта система получила новую,
11-ю, версию Windows, улучшилась совместимость со старыми приложениями (по сравнению с Windows Vista}, был снова изменен пользовательский интерфейс системы ит. д.&lt;/p&gt;

&lt;p&gt;В 2012 г. фирма Microsoft подготовила к выпуску операционную
систему Windows 8. Эта система содержит дополнительные улучшения в механизмах распознавания голоса, улучшенную систему
защиты от внедрения вредоносных программ, измененный интерфейс, напоминающий интерфейс мобильной версии Windows Phone 7, и т.д.&lt;/p&gt;

&lt;p&gt;Помимо пользовательских версий операционных систем семейство Windows содержит и специальные версии для серверов, больших центров обработки данных и т.п. Фактически выход каждой
новой версии пользовательской операционной системы Windows,
особенно на основе ядра Windows NT, сопровождается выходом
{практически на том же ядре} серверной версии операционной
системы. Так, были выпущены серверные версии Windows Server
2003, Windows&lt;/p&gt;</content><author><name>Ruslan Kornev</name><email>ruskosha@gmail.com</email></author><category term="Glava1" /><summary type="html">Самыми известными и популярными операционными системами общего назначения в настоящее время являются операционные системы семействWindows и UNIX, а также их ответвления. Операционные системы семейства МХ являются одной из старейших ветвей операционных систем, при этом до сих пор UNIX-подобные операционные системы широко применяются и не теряют своей актуальности.</summary></entry><entry><title type="html">Функции операционных систем и этапы их развития</title><link href="http://localhost:4000/glava1/2021/06/18/1-3.html" rel="alternate" type="text/html" title="Функции операционных систем и этапы их развития" /><published>2021-06-18T03:04:00+03:00</published><updated>2021-06-18T03:04:00+03:00</updated><id>http://localhost:4000/glava1/2021/06/18/1-3</id><content type="html" xml:base="http://localhost:4000/glava1/2021/06/18/1-3.html">&lt;p&gt;Исторически функции операционной системы развивались совместно с развитием самой вычислительной техники. В свое время
было принято выделять поколения вычислительных машин, опираясь на элементную базу их реализации: электронные лампы, полупроводниковые транзисторы, микросхемы и т. д. Однако не сами
эти свойства влияли на появление новых системных программных
средств.&lt;/p&gt;

&lt;p&gt;Основное влияние на развитие системного программного обеспечения общего назначения оказали четыре фактора: унификация
архитектуры вычислительных машин, объем оперативной памяти,
быстродействие процессора и состав периферийных устройств. Так,
для первых машин, в работе с которыми участвовали в основном их
конструкторы, ни о какой унификации не было и речи. В каждом
коллективе проводились эксперименты как с составом команд, так
и с величиной разрядной сетки вычислений. На время решения задачи программист, он же и оператор, становился полновластным
хозяином вычислительной установки. Он сам загружал программу,
сам вводил данные и оценивал результаты.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Библиотеки стандартных программ&lt;/strong&gt;. После появления серийно
выпускаемых машин стала возможна стандартизация в подходах
к разработке программного обеспечения и произошло выделение
программистов в отдельный класс пользователей. Естественным
средством обобщения и накопления опыта программирования
в этот период стали библиотеки стандартных программ, реализующих типовые функции: тригонометрические, математические (log, ехр, sqrt), ввод данных с внешних носителей, вывод, преобразования из одной системы счисления в другую и т.п.
Типичным примером подобной библиотеки могла служить библиотека стандартных программ ИС-2 (интерпретирукицая система)
для машин типа М-20. При этом следует заметить, что М-20 была
серийно выпускаемой машиной с трехадресной системой команд;
подобной ей системой команд обладали машины БЭСМ-3, БЭСМ-4,
а позднее и М-220.&lt;/p&gt;

&lt;p&gt;Комплекс программ ИС-2 программист загружал в оперативную
память до загрузки основной функциональной программы. Исполъзовался стандартный интерфейс, позволяющий исполняемой программе обратиться к одной из функций системной библиотеки. Аля
этого нужно было указать кол нужной функции и область памяти
для взаимодействия, например область памяти для загрузки данных.&lt;/p&gt;

&lt;p&gt;Позднее большая часть вычислительных функций перекочевала в библиотеки языков программирования и даже стандартные
процедуры перевода данных из одной формы представления в другую, а вот типовые действия, связанные с вводом и выводом, стали
неотъемлемой частью операционных систем. В настоящее время
в программистской среде для подобных функций операционной
среды используют термин АРI (Application Programming Interface),
подчеркивая тем самым прикладной характер подобных системных
средств.&lt;/p&gt;

&lt;p&gt;По мере того как архитектура вычислительных машин типизировалась и их быстродействие росло, все острее становилась проблема потерь времени при подготовке программы к выполнению:
загрузке в оперативную память, установке носителей с данными,
т.е. инициализации информационного окружения задачи, Действительно, когда процессор может выполнять десятки тысяч операций в секунду, затраты полутора-двух минут на установку колоды
перфокарт с программой и ввод ее приводят к потере возможности
выполнения 300 000 — 500 000 команд.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Пакетные мониторы&lt;/strong&gt;. Решение нашлось в создании системных
программ — мониторов, которые позволяли быстро загружать заранее подготовленные на магнитных носителях (в то время это
чаще всего были магнитные ленты) пакеты программ и данных.
Для внешнего обслуживания выполнения пакетов появилась особая группа специалистов — операторы. Они загружали на магнитные носители пакеты, подготовленные программистами. Потом
запускали мониторную программу, которая сама последовательно
считывала очередную задачу в оперативную память, создавала необходимое информационное окружение и запускала программу
на выполнение,&lt;/p&gt;

&lt;p&gt;Аля ускорения выполнения программ результаты не печатались
сразу, а выводились на накопительное устройство — часто такую же
магнитную ленту. И лишь потом, котла все расчеты были закончены, полученные данные постепенно распечатывались на бумагу.
Это позволяло сократить простои процессора, скорость работы которого в тысячи раз превышала скорость печати.&lt;/p&gt;

&lt;p&gt;Этот период развития системных средств характеризовался
включением в состав операционной системы программы системного ввода для подготовки пакетов, программы системного монитора
(иногда ее называли диспетчером, управляющей программой или
программой управления сеансами пользователей) и программы системного вывода для разгрузки полученных при расчетах пакета
данных на выходные устройства, например на печать.&lt;/p&gt;

&lt;p&gt;Что очень важно, вместе с пакетным монитором появился язык,
на котором программисты могли оформлять свои задания. Сначала
он назывался языком управления заданиями. Позднее стали чаще
использовать термин «язык команд операционной системы», потому что его составной частью были команды, выполняемые командным интерпретатором ОС.&lt;/p&gt;

&lt;p&gt;По мере роста емкости оперативного запоминающего устройства у операторов появилась возможность постоянно держать в памяти вычислительной установки все эти три программных средства&lt;/p&gt;

&lt;p&gt;(ввода, мониторинга и вывода). В результате во все время работы
можно было вводить новые задания и по мере готовности распечатывать результаты. Вод и вывод делались в низкоприоритетном
режиме, а основное время процессор использовался для последовательного решения задач пакета заданий.&lt;/p&gt;

&lt;p&gt;Наличие языка управления заданиями позволило программисту
не присутствовать при решении его задачи. Ему достаточно было
описать различные ситуации, которые могли бы возникнуть при
счете, и предусмотреть соответствующую реакцию операционной
системы. Остальное обслуживание вычислений ложилось на плечи
оператора. К этому же времени следует отнести явное отделение
программистов, подготавливающих программы расчетов на различных языках программирования, от пользователей, которые
с помощью этих программ решали прикладные задачи, соединяя
в пакетах программы и данные с помощью языка управления заданиями.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Мультипрограммирование, многозадачность&lt;/strong&gt;. Дальнейший рост
скорости работы процессора и объема оперативной памяти привел
к тому, что потенциально на машине могли одновременно выполняться программы нескольких пользователей. Это вызвало необходимость решения двух проблем — обеспечения независимости
параллельно выполняемых программ и защиты данных различных
пользователей, программы которых одновременно находятся в работе.&lt;/p&gt;

&lt;p&gt;Для решения первой задачи стали развивать функции диспетчера, который теперь должен был не только планировать работу
по смене программ в пакете, но и принимать решение о том, какой
из активных программ можно сейчас передать ресурсы центрального процессора. Одновременно на него легла задача распределения памяти между параллельно выполняемыми программами.&lt;/p&gt;

&lt;p&gt;В свою очередь, аппаратные средства стали следить за тем, чтобы одна задача не могла помешать работе другой независимой задачи. Это обеспечивалось за счет различных средств защиты памяти, которые приводили к немедленному останову (прерыванию}
программы, если она обращалась к адресному пространству чужой
задачи.&lt;/p&gt;

&lt;p&gt;Как мы видели, уже при пакетной обработке появилось мульти-программирование — параллельно могли выполняться программы
системного ввода, вывода и монитора пакета пользователя. Однако
системные программы могли «договориться» друг с другом и не метать взаимной работе. Теперь же на вычислительной установке параллельно работали программы различных пользователей, которые&lt;/p&gt;

&lt;p&gt;либо умышленно, либо случайно могли испортить данные в информационном окружении других пользователей.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Управление данными&lt;/strong&gt;. Необходимо было придумать такие правила работы с данными на внешних носителях, которые предотвращали бы несанкционированный доступ к ним программ посторонних пользователей. Аля этой пели записи данных стали организовывать на носителях в наборы данных (Data Set) и снабжать дополнительной информацией, которая позволяла выяснить, когда, кем
был создан это набор, и определяла правила доступа к нему.&lt;/p&gt;

&lt;p&gt;Было очевидно, что программа пользователя, имеющая непосредственный доступ к устройству (носителю информации), могла бы нарушить соглашения об организации наборов данных. Поэтому все операции по обмену данными между внешними устройствами и программой пользователя стали теперь принадлежностью
операционной системы, расширив тем самым состав системных
библиотек.&lt;/p&gt;

&lt;p&gt;Если программе надо было прочитать данные с внешнего устройства, она обращалась к соответствующему АРI операционной системы и получала в свою область памяти очередной блок данных,
Такая организация обмена создала еще одно полезное свойство —
независимость программ от физической организации данных.
Действительно, раз с устройством работала только операционная
система, программа пользователя становилась в большой степени
независимой от специфики носителей данных.&lt;/p&gt;

&lt;p&gt;Кроме того, операционная система брала на себя функцию проверки правомочности доступа. Пользователь — владелец набора
данных — должен был только указать, кому он разрешает работу
со своим набором и в каком режиме (только читать, читать и писать,
удалять ит. п.), В ряде случаев операционная система обеспечивала
даже шифрование данных по заданному пользователем ключу.&lt;/p&gt;

&lt;p&gt;Поддержание определенной организации данных (файловой
системы) на носителях потребовало включения в состав операционной системы еще и специальных программ (утилит), которые выполняли предварительную подготовку магнитных носителей. При
этом на носитель записывалась специальная разметка, обеспечивающая в дальнейшем размещение на нем данных пользователей.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Системы разделения времени&lt;/strong&gt;. На следующем этапе роста объемов памяти и производительности стало понятно, что крупная вы-
числительная установка может обслуживать не только нескольких
пользователей одной организации, но и целый регион. Конечно, при
этом возникает проблема обеспечения удаленного доступа пользователей к системе. Задачу доступности удалось решить за счет
использования относительно дешевых терминальных устройств
на основе телетайпов.&lt;/p&gt;

&lt;p&gt;Терминал (клавиатура и печатающее устройство} подключался
к вычислительной установке по обычной телефонной паре (проводу с двумя проводниками). Операционная система разделения времени успевала поддерживать одновременное обслуживание {ввод/
вывод} нескольких сотен терминалов, поскольку скорость ввода
и вывода на телетайпе не превышает нескольких десятков символов в секунду. У пользователя появлялась иллюзия, что он имеет
непосредственный доступ к собственной вычислительной машине.
Он перестал нуждаться в посредничестве оператора.&lt;/p&gt;

&lt;p&gt;Конечно, разделение времени процессора использовалось уже
на этапе обеспечения мультипрограммирования. Но появление
большого числа пользователей, подключенных через относительно
медленные устройства, привело еще и к возможности разделения
времени при использовании памяти машины, Пока пользователь
читал сообщение на терминале и вводил ответ, его программа простаивала. Поэтому операционная система вытесняла Такую про-
грамму, находящуюся в режиме ожидания, во внешнюю память
(на магнитный диск или магнитный барабан). Когда от пользователя поступали данные для дальнейшей работы, программа вновь
восстанавливалась в оперативной памяти. Такой режим работы по-
лучил название свопинга (от англ. мор — менять местами}.&lt;/p&gt;

&lt;p&gt;Появлению систем разделения времени способствовало то, что
операционная система уже взяла на себя функцию обмена с внешними устройствами и существовала достаточно дешевая в эксплуатации развитая телефонная сеть, позволявшая подключить пользовательский терминал практически в любой квартире. Проблема
персонификации данных разных пользователей уже была решена
на предшествующем этапе.&lt;/p&gt;

&lt;p&gt;Надежность механических телетайпов оставляла желать лучшего, поэтому достаточно быстро появились терминалы на основе
электронно-лучевой трубки, обеспечивающие как большую скорость вывода, так и большую надежность. Обычно их дополняли
компактные печатающие устройства (принтеры) для получения так
называемой твердой копии выведенных данных.&lt;/p&gt;

&lt;p&gt;Подобная конфигурация терминалов широко использовалась
в Москве в 1980 г. для информационного обслуживания Олимпиады-80 ив 1985 г. при проведении Фестиваля молодежи и студентов.
Весьма оригинально были построены учебные терминалы фирмы
СDС, в которых вместо электронно-лучевой трубки была установлена плазменная панель. Это обеспечивало очень высокую стабильность изображения символов, а кроме того, плоскость экрана давала возможность проецировать на него картинки микрофильмов,
дополняя таким образом выводимую по линии связи текстовую
информацию.&lt;/p&gt;

&lt;p&gt;Очень скоро стало понятно, что терминалу можно поручить
и предварительную обработку данных: редактирование символьных строк, хранение небольших объемов данных, управление печатью. Такой терминал значительно снимал нагрузку как с линии
связи, так и с центральной вычислительной установки. Стали говорить об интеллектуальном терминале.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Персональные компьютеры и сети&lt;/strong&gt;. Следующим шагом стало
превращение интеллектуального терминала в самостоятельное вычислительное устройство со своим центральным процессором, своей оперативной памятью и своим набором внешних устройств. Быстрое развитие компактных устройств хранения данных на основе
магнитных носителей с прямым доступом привело к тому, что их
емкости и скорости доступа вполне хватало для размещения персональных данных пользователя. И в какой-то момент показалось,
что все проблемы пользователей решены. Они получили в монопольное владение собственный вычислитель — персональный компьютер (ПК, Personal Computer — РС).&lt;/p&gt;

&lt;p&gt;Первые операционные системы ПК были лишены и развитых
средств мультипрограммирования, и средств защиты данных. Это
были однозадачные однопользовательские операционные системы, но продолжалось так недолго. Стремление к получению доступа к централизованным архивам данных привело к новому развитию сетей связи. А в ряде случаев и решение задач пользователя
не могло быть обеспечено ресурсами только одного ПК. Рост объемов памяти и быстродействия микропроцессоров ПК дал возможность перейти к мультипрограммированию и многозадачности.&lt;/p&gt;

&lt;p&gt;Телефонные сети, получившие развитие на предшествующем
этапе, уже не могли справиться с передачей необходимых объемов
данных. Скорости в тысячи и десятки тысяч битов в секунду, которые были вполне достаточны при передаче строковой информации
объемом в сотни байтов от центрального вычислителя к терминалу,
стало не хватать. Действительно, для передачи простой фотографии размером 1 Мбайт потребуется полторы-две минуты.&lt;/p&gt;

&lt;p&gt;Поэтому развитие ПК, как ни странно это казалось на первом
этапе их появления, резко стимулировало развитие высокоскоростных сетей связи. А в составе операционных систем стало непременным присутствие программных функций сетевого обмена.
По сути, эти функции можно рассматривать как дальнейшее развитие библиотек стандартных функций. Но с другой стороны — это
часть современной системы управления данными со своими соглашениями об организации и правилах сетевого доступа.&lt;/p&gt;

&lt;div id=&quot;quiz-wrapper&quot; class=&quot;wrapper&quot;&gt;
    &lt;main class=&quot;main&quot;&gt;
        &lt;div class=&quot;quiz__head&quot;&gt;
            &lt;div class=&quot;head__content&quot; id=&quot;head&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Ut ducimus odit accusamus, illum quas magni provident odio praesentium commodi sint, porro harum, minus cupiditate architecto culpa aut ex dolore officia.&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;quiz__body&quot;&gt;
            &lt;div class=&quot;buttons&quot;&gt;
                &lt;div class=&quot;buttons__content&quot; id=&quot;buttons&quot;&gt;
                    &lt;button class=&quot;button&quot;&gt;Default button&lt;/button&gt;&lt;br /&gt;
                    &lt;button class=&quot;button button_wrong&quot;&gt;Wrong answer&lt;/button&gt;&lt;br /&gt;
                    &lt;button class=&quot;button button_correct&quot;&gt;Correct answer&lt;/button&gt;&lt;br /&gt;
                    &lt;button class=&quot;button button_passive&quot;&gt;Unclicked button&lt;/button&gt;&lt;br /&gt;
                &lt;/div&gt;
            &lt;/div&gt;
&lt;div class=&quot;footer__content&quot; id=&quot;pages&quot;&gt;0 / 0&lt;/div&gt;
            &lt;div class=&quot;quiz__footer&quot;&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/main&gt;
 &lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/assets/myscript2.js&quot;&gt;&lt;/script&gt;</content><author><name>Ruslan Kornev</name><email>ruskosha@gmail.com</email></author><category term="Glava1" /><summary type="html">Исторически функции операционной системы развивались совместно с развитием самой вычислительной техники. В свое время было принято выделять поколения вычислительных машин, опираясь на элементную базу их реализации: электронные лампы, полупроводниковые транзисторы, микросхемы и т. д. Однако не сами эти свойства влияли на появление новых системных программных средств.</summary></entry><entry><title type="html">Универсальные и специализированные операционные системы. Операционные системы реального времени</title><link href="http://localhost:4000/glava1/2021/06/18/1-2.html" rel="alternate" type="text/html" title="Универсальные и специализированные операционные системы. Операционные системы реального времени" /><published>2021-06-18T02:40:00+03:00</published><updated>2021-06-18T02:40:00+03:00</updated><id>http://localhost:4000/glava1/2021/06/18/1-2</id><content type="html" xml:base="http://localhost:4000/glava1/2021/06/18/1-2.html">&lt;p&gt;Помимо классификаций на основе количества пользователей
в системе и на основе количества одновременно выполняющихся
процессов можно ввести еще один вид классификации операционных систем: операционные системы общего назначения и операционные системы специального назначения.&lt;/p&gt;

&lt;p&gt;К классу &lt;em&gt;операционных систем общего назначения&lt;/em&gt; относят операционные системы, которые могут являться как однопроцессными, так и многопроцессными, как многопользовательскими, так и однопользовательскими. Это операционные системы, которые работают
в составе обычных настольных систем. Их основное предназначение
состоит в том, чтобы предоставить пользователю системы удобный
и понятный механизм управления аппаратными средствами вычислительной системы, обрабатывать запросы пользователя, максимально изолируя его от низкоуровневых операций и интерфейсов. Такие
операционные системы ориентируются в первую очередь на простоту применения, поскольку их основными пользователями обычно являются не программисты, а пользователи средней или низкой квалификации. Зачастую такие пользователи могут даже не представлять,
что за красивой картинкой анимированных обоев и разнообразием
всевозможных красот графических интерфейсов скрывается мощнейший программный комплекс, управляющий всем аппаратным
комплексом компьютера. К подобным операционным системам относятся настольные версии операционных систем семейства Windows,
Linux, Apple iOS и т.д. Иными словами, это те операционные системы, с которыми пользователь может иметь дело как на работе для выполнения каких-то необходимых задач, так и дома для развлечения.&lt;/p&gt;

&lt;p&gt;В противоположность операционным системам общего н назначения ОС специального назначения относительно редко используются
в повседневной жизни. Основные пользователи таких операционных систем — квалифицированные разработчики. Подобные
операционные системы предназначены для управления ресурсами
специальных вычислительных систем. Зачастую такие системы являются встраиваемыми, т.е. системами, которые должны работать,
будучи встроенными непосредственно в устройство, которым они
управляют. К ним можно отнести такие операционные системы,
как Android, iOS, Windows CE и т.д.&lt;/p&gt;

&lt;p&gt;Одним из подмножеств операционных систем специального
назначения являются операционные системы реального времени.
Многие встраиваемые системы требуют, чтобы операционная система, работающая в составе такого программно-аппаратного комплекса, реагировала на внешние события и входные данные в течение некоторого, зачастую очень малого, промежутка времени.
Иначе говоря, операционные системы реального времени — это
системы, которые способны обеспечить требуемый уровень сервиса в определенный промежуток времени.&lt;/p&gt;

&lt;p&gt;Операционные системы реального времени можно разделить
на два класса: системы жесткого реального времени и системы мягкого реального времени. Операционные системы, которые способны выполнять действия, не превышая требуемое время выполнения,
относят к операционным системам жесткого реального времени.
Если же операционная система способна лишь в среднем обеспечивать требуемое время выполнения, без строгого соблюдения верх-
него временного предела, то такую систему относят к классу операционных систем мягкого реального времени. Но при этом для обоих
классов ОС реального времени критическим требованием является
детерминизм такой системы, т.е. предсказуемость ее поведения.&lt;/p&gt;

&lt;p&gt;Системы реального времени требуются там, где задержка реакции системы может приводить к аварийным ситуациям, грозящим
потерями материальных средств, катастрофами, гибелью людей
и т. д. В таких системах часто обходятся вообще без операционных
систем.&lt;/p&gt;

&lt;p&gt;Использование операционных систем реального времени позволяет сократить сроки разработки управляющего ПО и повысить
предсказуемость его поведения в следующих случаях;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;если разработанное управляющее ПО получается достаточно
большим по объему;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;если в процессе его выполнения требуется нескольких вычисли-
тельных потоков;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;если решаемая задача содержит сложные требования по синхронизации доступа к ресурсам и т.д.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Для управления процессами в таких операционных системах используется один из двух подходов:&lt;/p&gt;

&lt;p&gt;1) управление на основе приоритетов событий. При использовании данной стратегии управление передается тому процессу, который связан с обработкой наиболее приоритетного события;&lt;/p&gt;

&lt;p&gt;2) управление на основе разделения времени. В этом случае переключение процессов осуществляется на основе регулярных прерываний по заданным интервалам времени и в случае наступления
событий.&lt;/p&gt;

&lt;p&gt;Во многих таких системах состав процессов является неизменным. Они запускаются при старте операционной системы и существуют до момента завершения ее работы. Неиспользуемые процессы могут переходить в пассивное состояние, когда они не нужны, и выходить из него, если происходит, например, событие, обработка которого требует активности соответствующего процесса.
Такая система запуска и завершения процессов также вызвана
требованием предсказуемости поведения операционной системы
и параметров по времени реакции. Поэтому во многих таких системах запуск новых процессов просто не допускается, все они должны быть предопределены заранее.&lt;/p&gt;

&lt;p&gt;В настоящее время существует достаточно большое количество операционных систем реального времени: LynxOS, RTLinux, VxWorks  и т.д. Одной из наиболее известных операционных систем реального времени является QNX, которая иногда используется и в качестве настольной. Помимо этих коммерчески распространяемых продуктов существует еще и некоторое количество
операционных систем, разработанных самостоятельно компаниями, но не распространяемых на коммерческой основе, а используемых только в составе уже готовых программно-аппаратных
комплексов.&lt;/p&gt;</content><author><name>Ruslan Kornev</name><email>ruskosha@gmail.com</email></author><category term="Glava1" /><summary type="html">Помимо классификаций на основе количества пользователей в системе и на основе количества одновременно выполняющихся процессов можно ввести еще один вид классификации операционных систем: операционные системы общего назначения и операционные системы специального назначения.</summary></entry><entry><title type="html">Основные понятия</title><link href="http://localhost:4000/glava1/2021/06/18/1-1.html" rel="alternate" type="text/html" title="Основные понятия" /><published>2021-06-18T00:10:00+03:00</published><updated>2021-06-18T00:10:00+03:00</updated><id>http://localhost:4000/glava1/2021/06/18/1-1</id><content type="html" xml:base="http://localhost:4000/glava1/2021/06/18/1-1.html">&lt;p&gt;При решении своих задач в среде операционной системы пользователь должен определить данные и инструментальное (программное) средство для их обработки, В большинстве случаев решение
задачи пользователя сводится к последовательном применению
нескольких инструментов (например, ввода данных, сортировки,
слияния, вывода].&lt;/p&gt;

&lt;p&gt;Операционная система предоставляет пользователю базовый
набор инструментов и среду для хранения данных, а также средства
управления последовательностью использования инструментов
Интервал времени, в течение которого пользователь решает одну
или несколько последовательных задач, пользуясь при этом средствами, предоставляемыми ОС, называется сеансом.&lt;/p&gt;

&lt;p&gt;В начале любого сеанса пользователь идентифицирует себя,
в конце указывает, что сеанс закончен, Описание последовательности использования программных инструментов, записанное па некотором формальном языке, называется заданием, а сам язык — языком управления заданиями.&lt;/p&gt;

&lt;p&gt;Выполнение заданий в большинстве операционных систем производится командным интерпретатором, более подробное определение которого будет дано далее.&lt;/p&gt;

&lt;p&gt;Обычно пользователю предоставляется некоторый интерфейс
общения с командным интерпретатором, при использовании которого команды вводятся с клавиатуры, а результат их выполнения выводится на экран. Такой интерфейс ассоциируется с логическим
понятием терминала — совокупности устройства ввода (обычно
клавиатуры} и устройства вывода (дисплея, выводящего текстовую
информацию). В настоящее время более употребительным является графический интерфейс пользователя (С), рассмотрение которого выходит за рамки данного учебника.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Программа (в общем случае} — набор инструкций процессора,хранящийся на диске [или другом накопителе информации). Для того чтобы программа могла быть запущена на выполнение, оле-рационная система должна создать среду выполнения — информационное окружение решаемой задачи. После этого операционная система перемещает исполняемый код и данные программы в оперативную память и инициирует выполнение программы.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Операционная система выполняет функции управления аппаратными ресурсами, их распределения между выполняемыми программами пользователя и формирует среду исполнения, которая содержит все данные, необходимые для программы. Такая среда в дальнейшем и будет называться информационным окружением.
В информационное окружение входят данные и объекты, обрабатываемые операционной системой, которые влияют на выполнение программы, т.е. на решение задачи пользователя, В ходе дальнейшего изложения будут приведены примеры информационного окружения различного характера.&lt;/p&gt;

&lt;p&gt;Используя понятия программы, данных и информационного
окружения, можно определить понятие задачи в среде ОС как совокупность программы и данных, являющихся частью информационного окружения.&lt;/p&gt;

&lt;p&gt;Выполняемая программа образует процесс. Процесс представляет собой совокупность информационного окружения и области памяти, содержащей исполняемый код и данные программы. Обычно
в памяти, контролируемой операционной системой, может одновременно работать большое число процессов.&lt;/p&gt;

&lt;p&gt;Вполне естественно, что на однопроцессорных компьютерах
возможно одновременное выполнение программного кола только одного процесса, поэтому часть процессов находятся в режиме
ожидания, а один из процессов — в режиме выполнения. Процессы
при этом образуют очередь, операционная система передает управление первому процессу в очереди, затем следующему ит.л,&lt;/p&gt;

&lt;p&gt;Процесс, имеющий потенциальную возможность получить
входные данные от пользователя с клавиатуры и вывести результаты своей работы на экран, называется процессом переднего плана; процесс, выполняемый без непосредственного взаимодействия
с пользователем, — фоновым процессом.&lt;/p&gt;

&lt;p&gt;В ходе своей работы процессы используют вычислительную
мощность процессора, оперативную память, обращаются к внеш
ним файлам, внутренним данным ядра операционной системы. Все
эти объекты входят в информационное окружение процесса и называются ресурсами.&lt;/p&gt;

&lt;p&gt;Ресурсом может быть как физический объект, к которому ОС
предоставляет доступ, — процессор, оперативная память, дисковые
накопители, так и логический объект, который существует только
в пределах самой ОС, например таблица выполняемых процессов
или сетевых подключений. Необходимость в управлении ресурсами со стороны ОС вызвана в первую очередь тем, что ресурсы
ограничены (по объему, времени использования, количеству обслуживаемых пользователей и т. п.). Операционная система в данной
ситуации либо управляет ограничениями ресурсов, предотвращая
их исчерпание, либо предоставляет средства обработки ситуаций,
связанных с исчерпанием ресурсов. Лимиты многих ресурсов, заданные в ОС по умолчанию, могут изменяться затем администратором системы. Примером такого ресурса может служить максимальное количество файлов, одновременно открытых пользователем.&lt;/p&gt;

&lt;p&gt;В случае, если операционная система позволяет одновременно
использовать ресурсы нескольким процессам, ее ресурсы можно
подразделить на типы, указанные на рис. 1.1 .&lt;/p&gt;

&lt;p&gt;Неразделяемые ресурсы могут быть использованы на заданном
отрезке времени только одним процессом, при этом другие процессы не имеют доступа к такому ресурсу дс полного освобождения
ресурса занявшим его процессом. Примером такого ресурса может
служить файл, открытый на запись в исключительном режиме. Все
попытки использовать этот файл другими процессами (даже на чтение) завершаются неудачей.&lt;/p&gt;

&lt;p&gt;Разделяемые ресурсы могут использоваться несколькими процессами, При этом к таким ресурсам возможен одновременный доступ процессов (например, к часам, при помощи которых определяется текущее системное время).&lt;/p&gt;

&lt;p&gt;Некоторые разделяемые ресурсы не могут обеспечить одновременный доступ, но позволяют использовать их несколькими процессами, не дожидаясь момента полного освобождения ресурса.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
    &lt;img src=&quot;/assets/tipres.png&quot; alt=&quot;Рис 1.1. Типы ресурсов, доступных в операционной системе&quot; /&gt;
    &lt;figcaption&gt;Рис 1.1. Типы ресурсов, доступных в операционной системе&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;p&gt;В этом случае используется квантование моментов использования
ресурса по времени.&lt;/p&gt;

&lt;p&gt;Вкаждый квантвремени один процесс получает полные и исключительные права на владение данным ресурсом. При этом значение
такого кванта много меныше полного времени, в течение которого
ресурсе используется этим процессом, т.е. интервала времени, необходимого процессу для репгения задачи пользователя.&lt;/p&gt;

&lt;p&gt;Примером ресурса с доступом с разделением времени может
служить процессорное время в многозадачных ОС. В каждый квант
времени выполняется определенное число инструкций одного процесса, после чего управление передается следующему процессу
и начинается выполнение его инструкций.&lt;/p&gt;

&lt;p&gt;Процессы, ожидающие предоставления доступа к разделяемому
ресурсу, организуются в очередь с приоритетом. Процессы с одинаковым приоритетом получают доступ к ресурсу последовательными квантами, при этом некоторые процессы имеют более высокий приоритет и получают доступ к ресурсу чаще.&lt;/p&gt;

&lt;h1&gt;1.1.1. Типовая структура операционной системы&lt;/h1&gt;

&lt;p&gt;Обычно в составе операционной системы выделяют два уровня:
ядро системы и вспомогательные системные программные средства, иногда называемые системными утилитами. Ядро выполняет
все функции по управлению ресурсами системы — как физическими, так и логическими — и разделяет доступ пользователей (программ пользователей) к этим ресурсам. При помощи системного
программного обеспечения пользователь управляет средствами,
предоставляемыми ядром.&lt;/p&gt;

&lt;p&gt;В ядро типичной операционной системы входят следующие компоненты: система управления сеансами пользователей, файловая система, система управления задачами (процессами), система ввода/вывода.
Интерфейс ядра ОС с прикладными программами осуществляется при
помощи программного интерфейса системных вызовов, интерфейс
с аппаратным обеспечением — при помощи драйверов (рис. 1.2).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Система управления сеансами пользователей осуществляет регистрацию сеанса пользователя при начале его работы с ОС, хранит оперативную информацию, входящую в информационное
окружение сеанса, при помощи системы ввода/вывода поддерживает соответствие пользовательского терминала реальным или виртуальным устройствам, корректно завершает сеанс при окончании
работы пользователя с системой.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;image&quot;&gt;
    &lt;img src=&quot;/assets/stryadro.png&quot; alt=&quot;Рис 1.2. Структура ядра типичной операционной системы&quot; /&gt;
    &lt;figcaption&gt;Рис 1.2. Структура ядра типичной операционной системы&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;p&gt;Файловая система выполняет преобразование данных, хранимых на внешних запоминающих устройствах (например, на дисковых накопителях или на flash-накопителях}, в логические объекты — файлы и каталоги. Также файловая система выполняет функции разграничения доступа к файлам и каталогам при обращении
к ним со стороны системы управления сеансами или при использовании файловой системы через интерфейс системных вызовов.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Система управления процессами распределяет ресурсы между
выполняемыми задачами (процессами), обеспечивает защиту памяти процессов от модификации ее другими процессами, реализует механизмы межпроцессного взаимодействия,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Система ввода/вывода обрабатывает запросы всех рассмотренных выше компонент ядра и преобразует их в вызовы логических
устройств, поддерживаемых ОС. Каждое такое устройство представляет собой логический объект, обращение к которому происходит стандартными для ОС средствами (например, как к адресу в оперативной памяти либо как к специальному файлу). Логическое
устройство может быть чисто виртуальным (целиком функционировать внутри ядра ОС) или представлять логический объект, связанный через драйверы с реальными аппаратными устройствами.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Примером чисто виртуального устройства может служить «черная дыра» /dev/null в  UNIX-системах. Вся информация, записываемая в данное устройство, пропадает, т.е. оно может быть использовано для поглощения данных, несущественных для решаемой задачи,&lt;/p&gt;

&lt;p&gt;Драйверы устройств — это системные программы, которые преобразуют запросы системы ввода/вывода в последовательности
управляющих команд для аппаратных устройств. Драйвер каждого устройства скрывает особенности его аппаратной реализации
и предоставляет системе ввода/вывода стандартизированный интерфейс доступа к аппаратному обеспечению системы.&lt;/p&gt;

&lt;p&gt;С точки зрения прикладного программиста доступ к компонентам ядра ОС осуществляется при помощи интерфейса системных
вызовов — набора библиотек, включающих в себя стандартизованные наборы функций. Каждый такой набор предназначен для решения того или иного класса прикладных задач: доступа к сетевым
ресурсам, графическому режиму, реализации межпроцессного взаимодействия и т. п.&lt;/p&gt;

&lt;h1&gt;1.1.2. Классификация операционных систем&lt;/h1&gt;

&lt;p&gt;Сложность составных частей ядра и реализуемые ими функции
в первую очередь зависят от числа одновременно обслуживаемых
ОС пользователей и от числа одновременно выполняемых процессов. В связи с этим разумно провести классификацию ОС по этим
двум параметрам и рассмотреть особенности компонент ядра в каждом из типов ОС,&lt;/p&gt;

&lt;p&gt;По количеству одновременно обслуживаемых пользователей
операционные системы разделяются на однопользовательские (одновременно поддерживается не более одного сеанса пользователя)
и многопользовательские (одновременно поддерживается множество сеансов пользователей}. Многопользовательские системы,
кроме обеспечения защиты данных пользователей от несанкционированного доступа других пользователей, предоставляют средства разделения общих данных между многими пользователями.&lt;/p&gt;

&lt;p&gt;Рассмотрим особенности этих типов ОС более подробно.&lt;/p&gt;

&lt;p&gt;По количеству одновременно выполняемых процессов операционные системы делятся на однозадачные (не более одного работающего процесса) и многозадачные (множество работающих процессов). Одним из основных отличий многозадачных систем от однозадачных является наличие средств управления доступом к ресурсам — разделения ресурсов и блокировки используемых ресурсов,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Однопользовательские ОС&lt;/code&gt;. Данный тип ОС обеспечивает единовременную поддержку только одного сеанса работы пользователя. Новый сеанс работы пользователя может быть начат только
после завершения предыдущего сеанса. При этом в новом сеансе
пользователя сохраняется то же самое информационное окружение.&lt;/p&gt;

&lt;p&gt;С точки зрения однопользовательской ОС пользователи неразличимы, поэтому если с такой операционной системой начинают
работать несколько пользователей, то каждому из них она предоставляет доступ ко всем ресурсам и, возможно, к тому же самому
информационному окружению. При этом пользователь может работать и со своими уникальными данными, например с данными
на съемных дисках. При такой работе информационное окружение
сеансов работы пользователей в системе становится различным.&lt;/p&gt;

&lt;p&gt;Система управления сеансами однопользовательских ОС
включает в себя только средства инициации и завершения сеанса
и средства поддержки информационного окружения пользователя.
Причем во многих однопользовательских ОС (например, РОЗ) момент инициации сеанса пользователя наступает сразу же после загрузки ядра и инициализационных сценариев.&lt;/p&gt;

&lt;p&gt;Момент завершения сеанса совпадает с моментом выгрузки
ядра ОС из памяти (непосредственно перед завершением работы
ОС или вследствие обесточивания оборудования}. Таким образом,
время жизни сеанса пользователя в однопользовательских ОС приблизительно равно времени жизни работающего ядра системы.&lt;/p&gt;

&lt;p&gt;Вследствие неразличимости пользователей система управления
сеансами и файловая система в значительной мере упрощаются.&lt;/p&gt;

&lt;p&gt;Система управления сеансами однопользовательских ОС
не включает в себя средств идентификации и аутентификации
пользователей, а также средств защиты информационного окружения их сеансов. Файловая система однопользовательских ОС, как
правило, не включает в себя сложные механизмы разграничения
доступа к файлам и каталогам, хотя в файловой системе могут существовать флаги, задающие режимы работы с-файлами и каталогами, их атрибуты.&lt;/p&gt;

&lt;p&gt;Поддержка операционной системой только одного сеанса работы пользователя не исключает возможности одновременного выполнения многих задач пользователя. Иными словами, однопользовательская операционная система может быть многозадачной.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Многопользовательские ОС&lt;/code&gt;. Данный тип ОС обеспечивает
одновременную работу большого количества пользователей, что
в значительной мере расширяет набор функций, реализуемых
файловой системой и системой поддержки сеансов. В несколько
меньшей степени поддержка множества пользователей отражается
на системе ввода/вывода и системе управления процессами.&lt;/p&gt;

&lt;p&gt;Система управления сеансами пользователей должна включать
в себя средства идентификации и аутентификации пользователей.
Она обеспечивает связывание каждого сеанса с реальным или виртуальным терминалом, содержит средства инициализации начального информационного окружения сеанса и обеспечивает защиту
данных сеанса.&lt;/p&gt;

&lt;p&gt;Файловая система многопользовательских ОС обеспечивает
разграничение доступа к файлам и каталогам на основании идентификаторов пользователей, полученных от системы управления
сеансами. Каждый файл и каталог в файловой системе сопровождаются информационным блоком, определяющим нрава доступа
к ним пользователей.&lt;/p&gt;

&lt;p&gt;Пользователю предоставляется возможность определять права таким образом, чтобы только он имел доступ к данным, содержащимся в файлах и каталогам, а другие пользователи не могли
не только изменить эти данные, но даже прочитать их. Однако
в случае появления необходимости в совместном доступе к одной
и той же информации в файловой системе может быть определен
доступ на чтение и запись к одному набору данных для многих
пользователей.&lt;/p&gt;

&lt;p&gt;Система ввола/вывода многопользовательских ОС, кроме непосредственного доступа к устройствам и буферизации ввода/вывода, также управляет разделением доступа пользователей к устройствам, т.е. управляет устройствами как разделяемыми ресурсами.&lt;/p&gt;

&lt;p&gt;Следует отметить, что многопользовательские ОС обычно являются еще и многозадачными, поскольку они должны обеспечивать
одновременное выполнение большого количества программ разных пользователей.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Однозадачные ОС&lt;/code&gt;. Данный класс операционных систем предназначен для одновременного выполнения только одной задачи. Сразу после старта системы управление передается программе, играющей роль оболочки для работы пользователя. Как правило, одна
из функций такой оболочки — запуск других программ.&lt;/p&gt;

&lt;p&gt;Перед запуском программы сохраняется информационное окружение оболочки. После запуска программы ее процессу перелается полное управление и предоставляется доступ ко всем ресурсам.
По завершении программы освобождается память процесса, восстанавливается информационное окружение оболочки и управление передается операционной системой ей обратно.&lt;/p&gt;

&lt;p&gt;Запуск программ в таких ОС последовательный. В случае, если
одной из программ требуется вызвать на выполнение другую программу, точно так же сохраняется окружение вызывающей программы и по завершении вызываемой программы окружение восстанавливается.&lt;/p&gt;

&lt;p&gt;Система ввола/вывола однозадачных ОС не включает в себя
средств разделения доступа к устройствам, поскольку устройство
используется одновременно только одним процессом.&lt;/p&gt;

&lt;p&gt;Олднозадачные ОС могут быть и многопользовательскими. Примером таких систем могут быть ОС с пакетной обработкой. В та-
ких ОС пользователи формируют очередь заданий на выполнение
программ, при этом задания могут принадлежать разным пользователям. Система последовательно выполняет программы пользователей, при этом перед сменой пользователя завершается сеанс работы предыдущего пользователя и начинается сеанс нового. Таким
образом, при смене задания осуществляется смена информационных окружений каждой программы.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Многозадачные ОС&lt;/code&gt;. В многозадачных ОС в один момент времени в системе может быть запущено много программ (процессов).
В этом случае система управления процессами включает в себя планировщик процессов, выполняющий следующие функции:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;создание и уничтожение процессов — загрузка программы в память, создание информационного окружения и передача управления процессу при его создании, удаление информационного окружения и выгрузка процесса из памяти при его уничтожении;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;распределение системных ресурсов между процессами — планирование выполнения процессов, формирование очереди процессов и управление приоритетами процессов в очереди;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;межпроцессное взаимодействие — распределение общих данных между процессами или пересылка управляющих воздействий между одновременно выполняемыми процессами;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;синхронизация выполнения процессов — приостановка выполнения процессов до достижения некоторых условий, например
посылки управляющего воздействия одним из процессов.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Система ввода/вывода в таких ОС также усложняется, посколь-ку любой ресурс (файл или устройство} может использоваться совместно несколькими процессами. Аля предотвращения конфликтов доступа используется механизм блокировок, разрешающий
доступ к неразделяемому ресурсу только одному процессу в один
момент времени.&lt;/p&gt;

&lt;p&gt;ОС семейства UNIX относятся к многопользовательским много-
задачным операционным системам. Именно поэтому этот класс
операционных систем был взят за основу данного учебника.&lt;/p&gt;

&lt;p&gt;Поскольку, как уже говорилось, учебник ориентирован на прикладных программистов и пользователей, операционная система
в нем рассматривается как среда разработки и эксплуатации прикладного программного обеспечения.&lt;/p&gt;

&lt;p&gt;В учебнике рассматриваются только базовые средства ОС UNIX,
при этом не уделяется никакого внимания различным расширениям, например графическим средствам Х Windows System.&lt;/p&gt;

&lt;div id=&quot;quiz-wrapper&quot; class=&quot;wrapper&quot;&gt;
    &lt;main class=&quot;main&quot;&gt;
        &lt;div class=&quot;quiz__head&quot;&gt;
            &lt;div class=&quot;head__content&quot; id=&quot;head&quot;&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Ut ducimus odit accusamus, illum quas magni provident odio praesentium commodi sint, porro harum, minus cupiditate architecto culpa aut ex dolore officia.&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;quiz__body&quot;&gt;
            &lt;div class=&quot;buttons&quot;&gt;
                &lt;div class=&quot;buttons__content&quot; id=&quot;buttons&quot;&gt;
                    &lt;button class=&quot;button&quot;&gt;Default button&lt;/button&gt;&lt;br /&gt;
                    &lt;button class=&quot;button button_wrong&quot;&gt;Wrong answer&lt;/button&gt;&lt;br /&gt;
                    &lt;button class=&quot;button button_correct&quot;&gt;Correct answer&lt;/button&gt;&lt;br /&gt;
                    &lt;button class=&quot;button button_passive&quot;&gt;Unclicked button&lt;/button&gt;&lt;br /&gt;
                &lt;/div&gt;
            &lt;/div&gt;
&lt;div class=&quot;footer__content&quot; id=&quot;pages&quot;&gt;0 / 0&lt;/div&gt;
            &lt;div class=&quot;quiz__footer&quot;&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/main&gt;
 &lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/assets/myscript1.js&quot;&gt;&lt;/script&gt;</content><author><name>Ruslan Kornev</name><email>ruskosha@gmail.com</email></author><category term="Glava1" /><summary type="html">При решении своих задач в среде операционной системы пользователь должен определить данные и инструментальное (программное) средство для их обработки, В большинстве случаев решение задачи пользователя сводится к последовательном применению нескольких инструментов (например, ввода данных, сортировки, слияния, вывода].</summary></entry></feed>